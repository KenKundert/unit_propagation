# TODO
# Still need to do the unary and comparison operators
# probably need to make the multiplication and division tests more comprehensive
# need to check simplifications

test_unit_propagation:

  # Unary operators {{{1
  uprise:
    evaluate: +Quantity('1ns')
    expect: Quantity('1ns')

  relive:
    evaluate: -Quantity('2V')
    expect: Quantity('-2V')

  homicide:
    evaluate: abs(Quantity('-2V'))
    expect: Quantity('2V')

  elongate:
    evaluate: round(Quantity('1.75V'))
    expect: Quantity('2V')

  server:
    evaluate: trunc(Quantity('1.75V'))
    expect: Quantity('1V')

  vacuum:
    evaluate: floor(Quantity('1.75V'))
    expect: Quantity('1V')

  rooftop:
    evaluate: ceil(Quantity('1.75V'))
    expect: Quantity('2V')

  # Addition {{{1
  cranberry:
    evaluate: Quantity(2) + Quantity(1)
    expect: Quantity(3)

  syringe:
    evaluate: Quantity('2MHz') + Quantity('1MHz')
    expect: Quantity('3MHz')

  penknife:
    evaluate: Quantity('2MHz') + 1e6
    expect: Quantity('3MHz')

  bumblebee:
    evaluate: 2e6 + Quantity('1MHz')
    expect: Quantity('3MHz')

  quiet:
    execute:
        > q = Quantity('2MHz')
        > q += Quantity('1MHz')
    expect: q == Quantity('3MHz')

  garland:
    evaluate: Quantity('2MHz') + Quantity(1e6, 'rads/s')
    expect: incompatible units (2 MHz and 1 Mrads/s).

  bereave:
    check_units: no
    evaluate: Quantity('2MHz') + Quantity(1e6, 'rads/s')
    expect: Quantity('3MHz')

  sphinx:
    evaluate: Quantity('2MHz') + '5MHz'
    expect: Quantity('7MHz')

  snobby:
    evaluate: '13 MHz' + Quantity('2MHz')
    expect: Quantity('15MHz')

  devil:
    evaluate: Quantity('3kΩ') + '2ns'
    expect: incompatible units (3 kΩ and 2 ns).

  swelter:
    evaluate: '3kΩ' + Quantity('2ns')
    expect: incompatible units (2 ns and 3 kΩ).

  bumble:
    check_units: strict
    evaluate: Quantity('2MHz') + 1e6
    expect: incompatible units (Hz and None).

  sniper:
    check_units: strict
    evaluate: 2e6 + Quantity('1MHz')
    expect: incompatible units (2000000.0 and 1 MHz).

  # Subtraction {{{1
  detective:
    evaluate: Quantity(3) - Quantity(2)
    expect: Quantity(1)

  whirlpool:
    evaluate: Quantity('3MHz') - Quantity('2MHz')
    expect: Quantity('1MHz')

  suffering:
    evaluate: Quantity('3MHz') - 2e6
    expect: Quantity('1MHz')

  butcher:
    evaluate: 3e6 - Quantity('2MHz')
    expect: Quantity('1MHz')

  booth:
    execute:
        > q = Quantity('3MHz')
        > q -= Quantity('2MHz')
    expect: q == Quantity('1MHz')

  enumerate:
    evaluate: Quantity('3MHz') - Quantity(2e6, 'rads/s')
    expect: incompatible units (3 MHz and 2 Mrads/s).

  tenant:
    evaluate: Quantity('2MHz') - None
    expect: None: not a valid number.

  cowman:
    evaluate: None - Quantity('2MHz')
    expect: None: not a valid number.

  officiate:
    check_units: no
    evaluate: Quantity('3MHz') - Quantity(2e6, 'rads/s')
    expect: Quantity('1MHz')

  injury:
    check_units: strict
    evaluate: Quantity('3MHz') - 2e6
    expect: incompatible units (Hz and None).

  psych:
    check_units: strict
    evaluate: 2e6 - Quantity('2MHz')
    expect: incompatible units (2000000.0 and 2 MHz).

  # Multiplication {{{1
  spittoon:
    evaluate: Quantity(3) * Quantity(2)
    expect: Quantity(6)

  wrongdoer:
    evaluate: Quantity('3V') * Quantity('2A')
    expect: Quantity('6W')

  quote:
    evaluate: Quantity('3V') * 2
    expect: Quantity('6V')

  aphorism:
    evaluate: 3 * Quantity('2A')
    expect: Quantity('6A')

  deform:
    execute:
        > q = Quantity('3V')
        > q *= Quantity('2A')
    expect: q == Quantity('6W')

  matter:
    evaluate: Quantity('3J') * Quantity(2, 's')
    expect: Quantity(6, 'J-s')

  combatant:
    check_units: strict
    evaluate: Quantity('3V') * 2
    expect: incompatible units (3 V and 2).

  possessor:
    check_units: strict
    evaluate: 2e6 * Quantity('2A')
    expect: incompatible units (2 A and 2000000.0).

  meteor:
    check_units: strict
    evaluate: Quantity('3_m') * Quantity('4_m')
    expect: Quantity(12, 'm²')

  sextet:
    evaluate: Quantity('200 MHz') * '500mV'
    expect: Quantity('100MHz-V')

  immerse:
    evaluate: '200 MHz' * Quantity('500mV')
    expect: Quantity('100MHz-V')

  spaceman:
    evaluate: Quantity('200 MHz') * None
    expect: None: not a valid number.

  # Division {{{1
  portable:
    evaluate: Quantity(6) / Quantity(2)
    expect: Quantity(3)

  croupier:
    evaluate: Quantity('6V') / Quantity('2A')
    expect: Quantity('3Ω')

  stiffener:
    evaluate: Quantity('6V') / 2
    expect: Quantity('3V')

  fitter:
    evaluate: 6 / Quantity('2A')
    expect: Quantity('3 A⁻¹')

  viscount:
    evaluate: Quantity(6) / Quantity('2A')
    expect: Quantity('3 A⁻¹')

  deity:
    execute:
        > q = Quantity('6V')
        > q /= Quantity('2A')
    expect: q == Quantity('3Ω')

  sycamore:
    evaluate: Quantity('6_m') / Quantity(2, 's')
    expect: Quantity(3, 'm/s')

  greeting:
    check_units: strict
    evaluate: Quantity('6V') / 2
    expect: incompatible units (6 V and 2).

  utensil:
    check_units: strict
    evaluate: 6 / Quantity('2A')
    expect: incompatible units (6 and 2 A).

  specimen:
    evaluate: Quantity(6.28318531e6, "rads/s") / Quantity(6.28318531, 'rads')
    expect: Quantity('1 MHz')

  overcoat:
    evaluate: 1 / Quantity('1ns')
    expect: Quantity('1 GHz')

  debrief:
    evaluate: Quantity('1kg') / Quantity('25_cc')
    expect: Quantity('40 g/cc')

  drier:
    evaluate: 1 / Quantity('1mmho')
    expect: Quantity('1 kmho⁻¹')

  demon:
    evaluate: Quantity(100, 'rads/s') / Quantity(100, 'J-s')
    expect: Quantity(1, '(rads/s)/(J-s)')

  great:
    evaluate: Quantity('200 MHz') / '500mV'
    expect: Quantity('400MHz/V')

  cranefly:
    evaluate: Quantity(200) / Quantity(0.5)
    expect: Quantity(400)

  playgroup:
    evaluate: 200 / Quantity(0.5)
    expect: Quantity(400)

  sideswipe:
    evaluate: Quantity(200) / 0.5
    expect: Quantity(400)

  jaguar:
    evaluate: '200' / Quantity(0.5)
    expect: Quantity(400)

  increase:
    evaluate: Quantity(200) / '0.5'
    expect: Quantity(400)

  sickle:
    evaluate: '200 MHz' / Quantity('500mV')
    expect: Quantity('400MHz/V')

  hinder:
    evaluate: Quantity('200 MHz') / None
    expect: None: not a valid number.

  magnify:
    evaluate: None / Quantity('200 MHz')
    expect: None: not a valid number.

  # Equality {{{1
  headman:
    evaluate: Quantity(100, 'V') == Quantity(100, 'V')
    expect: True

  walker:
    evaluate: Quantity(100, 'V') == '100 V'
    expect: True

  smack:
    evaluate: Quantity(100, 'V') == Quantity(10, 'V')
    expect: False

  avert:
    evaluate: Quantity(100, 'V') == Quantity(100, 'A')
    expect: False

  wingspan:
    evaluate: Quantity(100, 'V') == 100
    expect: True

  playroom:
    evaluate: Quantity(100, 'V') == 10
    expect: False

  shawl:
    check_units: strict
    evaluate: Quantity(100, 'V') == 100
    expect: False

  evade:
    evaluate: Quantity(100, 'V') == None
    expect: False

  # Inequality {{{1
  dawdle:
    evaluate: Quantity(100, 'V') != Quantity(100, 'V')
    expect: False

  become:
    evaluate: Quantity(100, 'V') != '100 V'
    expect: False

  bloody:
    evaluate: Quantity(100, 'V') != Quantity(10, 'V')
    expect: True

  embrace:
    evaluate: Quantity(100, 'V') != Quantity(100, 'A')
    expect: True

  charm:
    evaluate: Quantity(100, 'V') != 100
    expect: False

  crimson:
    evaluate: Quantity(100, 'V') != 10
    expect: True

  squash:
    check_units: strict
    evaluate: Quantity(100, 'V') != 100
    expect: True

  catechism:
    evaluate: Quantity(100, 'V') != None
    expect: True

  # Greater than {{{1
  motel:
    evaluate: Quantity(100, 'V') > Quantity(100, 'V')
    expect: False

  rupture:
    evaluate: Quantity(100, 'V') > '100 V'
    expect: False

  grenade:
    evaluate: Quantity(100, 'V') > Quantity(10, 'V')
    expect: True

  printout:
    evaluate: Quantity(100, 'V') > Quantity(1000, 'V')
    expect: False

  groove:
    evaluate: Quantity(100, 'V') > Quantity(100, 'A')
    expect: incompatible units (100 V and 100 A).

  hairdryer:
    evaluate: Quantity(100, 'V') > 100
    expect: False

  gourmet:
    evaluate: Quantity(100, 'V') > 10
    expect: True

  brochure:
    check_units: strict
    evaluate: Quantity(100, 'V') > 100
    expect: incompatible units (100 V and 100).

  interject:
    evaluate: Quantity(100, 'V') > None
    expect: None: not a valid number.

  # Less than {{{1
  policy:
    evaluate: Quantity(100, 'V') < Quantity(100, 'V')
    expect: False

  eulogize:
    evaluate: Quantity(100, 'V') < '100 V'
    expect: False

  sense:
    evaluate: Quantity(100, 'V') < Quantity(10, 'V')
    expect: False

  ditch:
    evaluate: Quantity(100, 'V') < Quantity(1000, 'V')
    expect: True

  workshop:
    evaluate: Quantity(100, 'V') < Quantity(100, 'A')
    expect: incompatible units (100 V and 100 A).

  stable:
    evaluate: Quantity(100, 'V') < 100
    expect: False

  stain:
    evaluate: Quantity(10, 'V') < 100
    expect: True

  broil:
    check_units: strict
    evaluate: Quantity(100, 'V') < 100
    expect: incompatible units (100 V and 100).

  brunch:
    evaluate: Quantity(100, 'V') < None
    expect: None: not a valid number.

  # Greater than or equal to {{{1
  relax:
    evaluate: Quantity(100, 'V') >= Quantity(100, 'V')
    expect: True

  hobble:
    evaluate: Quantity(100, 'V') >= '100 V'
    expect: True

  subsidy:
    evaluate: Quantity(100, 'V') >= Quantity(10, 'V')
    expect: True

  duplicate:
    evaluate: Quantity(100, 'V') >= Quantity(1000, 'V')
    expect: False

  common:
    evaluate: Quantity(100, 'V') >= Quantity(100, 'A')
    expect: incompatible units (100 V and 100 A).

  peasant:
    evaluate: Quantity(100, 'V') >= 100
    expect: True

  yuppie:
    evaluate: Quantity(100, 'V') >= 10
    expect: True

  provider:
    check_units: strict
    evaluate: Quantity(100, 'V') >= 100
    expect: incompatible units (100 V and 100).

  coarse:
    evaluate: Quantity(100, 'V') >= None
    expect: None: not a valid number.

  # Less than or equal to {{{1
  negligee:
    evaluate: Quantity(100, 'V') <= Quantity(100, 'V')
    expect: True

  locution:
    evaluate: Quantity(100, 'V') <= '100 V'
    expect: True

  dairy:
    evaluate: Quantity(100, 'V') <= Quantity(10, 'V')
    expect: False

  hoodwink:
    evaluate: Quantity(100, 'V') <= Quantity(1000, 'V')
    expect: True

  layer:
    evaluate: Quantity(100, 'V') <= Quantity(100, 'A')
    expect: incompatible units (100 V and 100 A).

  torso:
    evaluate: Quantity(100, 'V') <= 100
    expect: True

  pause:
    evaluate: Quantity(10, 'V') <= 100
    expect: True

  doodle:
    check_units: strict
    evaluate: Quantity(100, 'V') <= 100
    expect: incompatible units (100 V and 100).

  patronize:
    evaluate: Quantity(100, 'V') <= None
    expect: None: not a valid number.

